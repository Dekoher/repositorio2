1.-
// Escribir una función llamada "existe" que reciba como primer argumento
// una array de números enteros y como segundo argumento un número entero
// y devuelva true si el número del segundo argumento existe dentro del array
// del primer argumento o false en caso contrario.
2.-
// Escribir una función llamada "impar" que reciba como primer argumento un
// array de enteros y devuelva como resultado los números en las posiciones
// impares del array.
3.-
// Escribir una función llamada "concatenar" que reciba como argumentos dos
// arrays de valores y que devuelva como resultado un array con los valores
// del primer array concatenados con los valores del segundo array.
4.-
// Escribir una función llamada "primo" que reciba un número y devuelva
// true si el número es un número primo o false si no lo es.
// Los números primos son todos los números naturales mayores a 1 y que solo
// son divisibles entre ellos mismos y la unidad.
5.-
// Escribe una función llamada "bisiesto" que reciba un año y devuelva 
// true si es un año bisiesto o false en caso contrario.
// Un año bisiesto ocurre cada cuatro años, excepto los finales de siglo
// (terminado en 00) a menos que también sea un múltiplo de 400
6.-
The median is the value separating the higher half of a data sample,
a population, or a probability distribution, from the lower half.
The median of a finite list of numbers can be found by arranging all 
the numbers from smallest to greatest.
If there is an odd number of numbers, the middle one is picked.
{1, 3, 3, 6, 7, 8, 9}
median = 6
If there are an even number of observations, then there is no single 
middle value; the median is then usually defined to be the mean of 
the two middle values.
{1, 2, 3, 4, 5, 6, 8, 9}
median = (4 + 5) / 2 = 4.5
function median(data) {
}
7.-
You are given a non-empty list of integers (X). You should return a list consisting of only 
the non-unique elements in this list. To do so you will need to remove all unique elements
(elements which are contained in a given list only once). Do NOT change the order of the list.
Example: 
[1, 2, 3, 1, 3] 1 and 3 non-unique elements and result will be [1, 3, 1, 3].
Precondition:
0 < len(data) < 1000
function nonUniqueElements(data) {
}
8.-
"Fizz buzz" is a word game we will use to teach the robots about division.
Let's learn computers.
You should write a function that will receive a positive integer and return:
"Fizz Buzz" if the number is divisible by 3 and by 5;
"Fizz" if the number is divisible by 3;
"Buzz" if the number is divisible by 5; 
The number as a string for other cases.
Input: A number as an integer.
Output: The answer as a string.
Precondition: 0 < number ≤ 1000
function fizzBuzz(data) {
}